<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>内部类 on SteamedFish&#39;s Blog</title>
    <link>https://www.steamedfish.top/tags/%E5%86%85%E9%83%A8%E7%B1%BB/</link>
    <description>Recent content in 内部类 on SteamedFish&#39;s Blog</description>
    <generator>Hugo -- 0.152.2</generator>
    <language>zh</language>
    <copyright>©2025 SteamedFish&amp;rsquo;s Blog</copyright>
    <lastBuildDate>Sat, 01 Nov 2025 06:14:24 +0000</lastBuildDate>
    <atom:link href="https://www.steamedfish.top/tags/%E5%86%85%E9%83%A8%E7%B1%BB/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Java SE从入门到跑路（八·内部类）</title>
      <link>https://www.steamedfish.top/post/java-se-inner-class/</link>
      <pubDate>Thu, 30 Oct 2025 19:21:03 +0800</pubDate>
      <guid>https://www.steamedfish.top/post/java-se-inner-class/</guid>
      <description>&lt;h1 id=&#34;前言&#34;&gt;前言&lt;/h1&gt;
&lt;p&gt;前几章我们讲了类、对象、继承、多态，以及 static 与 final。&lt;br&gt;
现在我们要介绍一个更灵活、更优雅的工具：&lt;strong&gt;内部类&lt;/strong&gt;（Inner Class）。  &lt;br&gt;
内部类的意思很简单：在一个类里再定义一个类。 &lt;br&gt;
你可能会问：“为什么要这么做？”&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;当某个类只会在另一个类中使用时，把它放在外部类里更清晰；&lt;/li&gt;
&lt;li&gt;内部类可以访问外部类的成员，即便是 private 也可以；&lt;/li&gt;
&lt;li&gt;匿名内部类可以快速实现接口或抽象类，让代码更紧凑。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;本章，我们会详细讲解 四种内部类：&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
