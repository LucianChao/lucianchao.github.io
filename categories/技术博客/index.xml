<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>技术博客 on SteamedFish&#39;s Blog</title>
    <link>https://www.steamedfish.top/categories/%E6%8A%80%E6%9C%AF%E5%8D%9A%E5%AE%A2/</link>
    <description>Recent content in 技术博客 on SteamedFish&#39;s Blog</description>
    <generator>Hugo -- 0.152.2</generator>
    <language>zh</language>
    <copyright>©2025 SteamedFish&amp;rsquo;s Blog</copyright>
    <lastBuildDate>Thu, 30 Oct 2025 11:01:51 +0000</lastBuildDate>
    <atom:link href="https://www.steamedfish.top/categories/%E6%8A%80%E6%9C%AF%E5%8D%9A%E5%AE%A2/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Java SE从入门到跑路（六·继承与多态）</title>
      <link>https://www.steamedfish.top/post/java-se-inheritance-polymorphism/</link>
      <pubDate>Thu, 30 Oct 2025 15:51:12 +0800</pubDate>
      <guid>https://www.steamedfish.top/post/java-se-inheritance-polymorphism/</guid>
      <description>&lt;p&gt;到目前为止，我们已经能写出功能完整的程序，&lt;br&gt;
使用类、对象、方法来组织逻辑，也学会了 &lt;code&gt;static&lt;/code&gt; 与 &lt;code&gt;final&lt;/code&gt; 的妙用。&lt;/p&gt;
&lt;p&gt;但是，当项目越来越大时，你可能会发现：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;不同类之间有很多相似的代码；&lt;/li&gt;
&lt;li&gt;某些功能需要在不同类之间共享或稍作修改；&lt;/li&gt;
&lt;li&gt;想要让程序更灵活，却发现改一处要动全身。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;于是，Java 提供了两个强大的“法宝”：  &lt;br&gt;
&lt;strong&gt;继承&lt;/strong&gt;（Inheritance） 和 &lt;strong&gt;多态&lt;/strong&gt;（Polymorphism）。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Java SE从入门到跑路（五·static与final：静与常的艺术）</title>
      <link>https://www.steamedfish.top/post/java-se-static-final/</link>
      <pubDate>Thu, 30 Oct 2025 07:46:37 +0000</pubDate>
      <guid>https://www.steamedfish.top/post/java-se-static-final/</guid>
      <description>&lt;h1 id=&#34;前言&#34;&gt;前言&lt;/h1&gt;
&lt;p&gt;在学完类与对象之后，你已经可以独立地定义自己的世界：
创建对象、设计方法、组织数据。   &lt;br&gt;
但在实际开发中，我们常常会遇到这样的问题：&lt;br&gt;
有些东西不需要属于某个对象，而应该属于整个类；&lt;br&gt;
有些值从头到尾都不该被修改。&lt;/p&gt;
&lt;p&gt;于是，Java 为我们提供了两个关键字——&lt;code&gt;static&lt;/code&gt; 和 &lt;code&gt;final&lt;/code&gt;。 &lt;br&gt;
前者让你在“对象之外”思考，构建&lt;strong&gt;共享与独立&lt;/strong&gt;的概念； &lt;br&gt;
后者让你定义&lt;strong&gt;不变与稳定&lt;/strong&gt;的规则。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Java SE从入门到跑路（四·面向对象之类与对象篇）</title>
      <link>https://www.steamedfish.top/post/java-se-oop/</link>
      <pubDate>Mon, 27 Oct 2025 20:15:32 +0800</pubDate>
      <guid>https://www.steamedfish.top/post/java-se-oop/</guid>
      <description>&lt;blockquote&gt;
&lt;h1 id=&#34;java万事万物皆对象&#34;&gt;JAVA——万事万物皆对象&lt;/h1&gt;
&lt;/blockquote&gt;
&lt;h1 id=&#34;前言&#34;&gt;前言&lt;/h1&gt;
&lt;p&gt;少年，恭喜你！你已经成功打开了&lt;strong&gt;新世界的大门&lt;/strong&gt;！看到这里你的Java学习之路才刚刚开始！从这章起，我们将真正的学习到Java的核心思想，甚至可以说是编程界最伟大的思想之一——&lt;strong&gt;面向对象&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;前面我们已经学会了使用&lt;strong&gt;流程控制&lt;/strong&gt;、&lt;strong&gt;数组和方法&lt;/strong&gt;，能够让程序按照逻辑顺序执行、批量存储数据(&lt;strong&gt;数组&lt;/strong&gt;)、并通过&lt;strong&gt;方法&lt;/strong&gt;复用代码，减少重复劳动。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Java SE从入门到跑路（三·数组与方法篇）</title>
      <link>https://www.steamedfish.top/post/java-se-arrays-methods/</link>
      <pubDate>Mon, 27 Oct 2025 11:21:39 +0800</pubDate>
      <guid>https://www.steamedfish.top/post/java-se-arrays-methods/</guid>
      <description>&lt;h2 id=&#34;前言&#34;&gt;前言&lt;/h2&gt;
&lt;p&gt;上一章我们学会了&lt;strong&gt;流程控制&lt;/strong&gt;——让程序知道“什么时候做”“做多少次”。   &lt;br&gt;
但如果要让程序处理大量数据，比如学生成绩、商品价格、坐标点列表，你会发现：&lt;br&gt;
光靠一个个变量，代码又臭又长、又难维护。&lt;br&gt;
比如计算三个学生的平均分，你可能会写出这样的代码：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;90&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;80&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;c&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;70&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;sum&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;c&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;double&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;avg&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;sum&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;System&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;out&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;println&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;平均分：&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;avg&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;要是有十个学生呢？一百个呢？ &lt;br&gt;
这时我们就需要一个能一次性装下多个数据的“容器”——&lt;strong&gt;数组(Array)&lt;/strong&gt;。  &lt;br&gt;
以及一个能封装、复用代码逻辑的工具——&lt;strong&gt;方法(Method)&lt;/strong&gt;。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Java SE从入门到跑路（二·流程控制篇）</title>
      <link>https://www.steamedfish.top/post/java-se-control-flow/</link>
      <pubDate>Mon, 27 Oct 2025 03:05:07 +0000</pubDate>
      <guid>https://www.steamedfish.top/post/java-se-control-flow/</guid>
      <description>&lt;h2 id=&#34;前言&#34;&gt;前言&lt;/h2&gt;
&lt;p&gt;在正式开始写代码之前，我们先聊一个非常重要的概念——程序的结构（Program Structures）。 &lt;br&gt;
很多新手一上来就盯着语法，看得眼花缭乱，但其实理解程序的“骨架”比死记硬背语法更重要。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Think of it as building a house &lt;br&gt;
你可以买很贵的材料，但没有合理的框架，房子也盖不稳。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Java SE从入门到跑路（一·基础语法篇）</title>
      <link>https://www.steamedfish.top/post/java-se-basics-tutorial/</link>
      <pubDate>Thu, 23 Oct 2025 23:43:16 +0000</pubDate>
      <guid>https://www.steamedfish.top/post/java-se-basics-tutorial/</guid>
      <description>全面掌握 Java SE 基础语法！详细讲解注释、字面量、变量、数据类型、类型转换、关键字与标识符、运算符等核心知识，配合实例与代码演示，帮助你从零打好 Java 基础。</description>
    </item>
  </channel>
</rss>
